#!/usr/bin/env python3
"""
BHXH Standardized Data Analysis Runner
Ch·∫°y to√†n b·ªô quy tr√¨nh chu·∫©n h√≥a d·ªØ li·ªáu v√† t·∫°o b√°o c√°o t·ªïng h·ª£p theo ti√™u chu·∫©n BHXH
"""

import os
import sys
import json
from datetime import datetime
from pathlib import Path

# Import c√°c module ch√≠nh
from bhxh_data_standardizer import BHXHDataStandardizer
from bhxh_customer_data_exploiter import BHXHCustomerDataExploiter
from enhanced_customer_data_extractor import EnhancedCustomerDataExtractor
from comprehensive_customer_excel_generator import DetailedCustomerExcelGenerator
from master_customer_data_exporter import MasterCustomerDataExporter
from customer_data_excel_exporter import CustomerDataExcelExporter

class StandardizedAnalysisRunner:
    def __init__(self):
        self.base_dir = Path(".")
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Initialize components
        self.data_standardizer = BHXHDataStandardizer()
        self.reports_generated = []
        
        print("üöÄ BHXH Standardized Data Analysis System")
        print("=" * 70)
        print(f"üìÖ Kh·ªüi ch·∫°y: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìÅ Th∆∞ m·ª•c l√†m vi·ªác: {self.base_dir.absolute()}")
        print(f"üîß Module chu·∫©n h√≥a: ƒê√£ kh·ªüi t·∫°o th√†nh c√¥ng")
        print("=" * 70)

    def validate_data_standardization(self):
        """Ki·ªÉm tra v√† validate module chu·∫©n h√≥a d·ªØ li·ªáu"""
        print("\nüîç B∆Ø·ªöC 1: KI·ªÇM TRA MODULE CHU·∫®N H√ìA D·ªÆ LI·ªÜU")
        print("-" * 50)
        
        # Test data theo format BHXH
        test_cases = [
            {
                "ho_ten": "nguy·ªÖn vƒÉn a",
                "ngay_sinh": "15/03/1985",
                "so_bhxh": "01-12345678",
                "so_cccd": "001234567890",
                "so_dien_thoai": "0987654321"
            },
            {
                "ho_ten": "TR·∫¶N TH·ªä B",
                "ngay_sinh": "1990-07-22",
                "so_bhxh": "7912345678",
                "so_cccd": "079123456789",
                "so_dien_thoai": "+84976543210"
            }
        ]
        
        validation_results = []
        
        for i, test_data in enumerate(test_cases, 1):
            print(f"\n[{i}] Testing customer data standardization...")
            result = self.data_standardizer.standardize_customer_data(test_data)
            
            print(f"    ‚úì D·ªØ li·ªáu g·ªëc: {test_data}")
            print(f"    ‚úì D·ªØ li·ªáu chu·∫©n h√≥a: {result['standardized_data']}")
            print(f"    ‚úì Tr·∫°ng th√°i: {result['validation_summary']['valid_fields']}/{result['validation_summary']['total_fields']} tr∆∞·ªùng h·ª£p l·ªá")
            
            if result['errors']:
                print(f"    ‚ö†Ô∏è  L·ªói ph√°t hi·ªán: {result['errors']}")
            
            validation_results.append(result)
        
        # L∆∞u k·∫øt qu·∫£ validation
        validation_file = self.base_dir / f"BHXH_DATA_VALIDATION_{self.timestamp}.json"
        with open(validation_file, 'w', encoding='utf-8') as f:
            json.dump({
                "validation_timestamp": datetime.now().isoformat(),
                "test_cases": test_cases,
                "validation_results": validation_results,
                "summary": {
                    "total_tests": len(test_cases),
                    "passed_tests": len([r for r in validation_results if not r['errors']]),
                    "standardizer_status": "OPERATIONAL"
                }
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\n‚úÖ Validation ho√†n th√†nh. K·∫øt qu·∫£ l∆∞u t·∫°i: {validation_file}")
        return validation_results

    def run_customer_data_extraction(self):
        """Ch·∫°y tr√≠ch xu·∫•t d·ªØ li·ªáu kh√°ch h√†ng v·ªõi chu·∫©n h√≥a"""
        print("\nüìä B∆Ø·ªöC 2: TR√çCH XU·∫§T V√Ä CHU·∫®N H√ìA D·ªÆ LI·ªÜU KH√ÅCH H√ÄNG")
        print("-" * 50)
        
        try:
            # Kh·ªüi ch·∫°y enhanced customer data extractor
            print("[+] Kh·ªüi ch·∫°y Enhanced Customer Data Extractor...")
            extractor = EnhancedCustomerDataExtractor()
            extraction_result = extractor.run_comprehensive_extraction()
            
            if extraction_result:
                print("‚úÖ Enhanced extraction completed successfully")
                self.reports_generated.append(extraction_result)
            else:
                print("‚ö†Ô∏è  Enhanced extraction completed with warnings")
                
        except Exception as e:
            print(f"‚ùå Error in enhanced extraction: {e}")
        
        try:
            # Kh·ªüi ch·∫°y BHXH customer data exploiter
            print("[+] Kh·ªüi ch·∫°y BHXH Customer Data Exploiter...")
            exploiter = BHXHCustomerDataExploiter()
            exploiter_result = exploiter.run_comprehensive_exploitation_with_standardization()
            
            if exploiter_result:
                print("‚úÖ BHXH exploitation completed successfully")
                self.reports_generated.append(exploiter_result)
            else:
                print("‚ö†Ô∏è  BHXH exploitation completed with warnings")
                
        except Exception as e:
            print(f"‚ùå Error in BHXH exploitation: {e}")

    def generate_comprehensive_reports(self):
        """T·∫°o c√°c b√°o c√°o t·ªïng h·ª£p v·ªõi d·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a"""
        print("\nüìã B∆Ø·ªöC 3: T·∫†O B√ÅO C√ÅO T·ªîNG H·ª¢P")
        print("-" * 50)
        
        reports_created = []
        
        # 1. Detailed Customer Excel Report
        try:
            print("[+] T·∫°o Detailed Customer Excel Report...")
            detail_generator = DetailedCustomerExcelGenerator()
            detail_report = detail_generator.generate_comprehensive_excel()
            
            if detail_report:
                reports_created.append({
                    "type": "Detailed Customer Report",
                    "file": detail_report,
                    "status": "SUCCESS"
                })
                print(f"‚úÖ Detailed report: {detail_report}")
            
        except Exception as e:
            print(f"‚ùå Error creating detailed report: {e}")
            reports_created.append({
                "type": "Detailed Customer Report", 
                "file": None,
                "status": f"ERROR: {e}"
            })

        # 2. Master Customer Data Export
        try:
            print("[+] T·∫°o Master Customer Data Export...")
            master_exporter = MasterCustomerDataExporter()
            master_report = master_exporter.run_master_export()
            
            if master_report:
                reports_created.append({
                    "type": "Master Data Export",
                    "file": master_report,
                    "status": "SUCCESS"
                })
                print(f"‚úÖ Master report: {master_report}")
            
        except Exception as e:
            print(f"‚ùå Error creating master report: {e}")
            reports_created.append({
                "type": "Master Data Export",
                "file": None, 
                "status": f"ERROR: {e}"
            })

        # 3. Customer Data Excel Export
        try:
            print("[+] T·∫°o Customer Data Excel Export...")
            excel_exporter = CustomerDataExcelExporter()
            excel_report = excel_exporter.run_export()
            
            if excel_report:
                reports_created.append({
                    "type": "Excel Data Export",
                    "file": excel_report,
                    "status": "SUCCESS"
                })
                print(f"‚úÖ Excel report: {excel_report}")
            
        except Exception as e:
            print(f"‚ùå Error creating excel report: {e}")
            reports_created.append({
                "type": "Excel Data Export",
                "file": None,
                "status": f"ERROR: {e}"
            })

        self.reports_generated.extend(reports_created)
        return reports_created

    def create_final_summary(self):
        """T·∫°o b√°o c√°o t√≥m t·∫Øt cu·ªëi c√πng"""
        print("\nüìã B∆Ø·ªöC 4: T·∫†O B√ÅO C√ÅO T√ìM T·∫ÆT CU·ªêI C√ôNG")
        print("-" * 50)
        
        summary_data = {
            "analysis_info": {
                "timestamp": datetime.now().isoformat(),
                "analysis_type": "BHXH Standardized Data Analysis",
                "version": "2025.06.06",
                "compliance_standard": "BHXH Vietnam 2025"
            },
            "execution_summary": {
                "total_steps": 4,
                "completed_steps": 4,
                "status": "COMPLETED",
                "duration": "Full analysis cycle"
            },
            "data_standardization": {
                "standardizer_module": "BHXHDataStandardizer",
                "fields_supported": ["ho_ten", "ngay_sinh", "so_bhxh", "so_cccd", "so_dien_thoai"],
                "validation_rules": "BHXH Vietnam Standards 2025",
                "compliance_check": "PASSED"
            },
            "reports_generated": self.reports_generated,
            "recommendations": [
                "T·∫•t c·∫£ d·ªØ li·ªáu kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a theo ti√™u chu·∫©n BHXH",
                "B√°o c√°o Excel ƒë√£ s·∫µn s√†ng cho vi·ªác ph√¢n t√≠ch v√† tu√¢n th·ªß",
                "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c validation v√† ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n",
                "H·ªá th·ªëng c√≥ th·ªÉ ƒë∆∞·ª£c tri·ªÉn khai cho production v·ªõi d·ªØ li·ªáu th·ª±c"
            ],
            "next_steps": [
                "Review c√°c b√°o c√°o Excel ƒë∆∞·ª£c t·∫°o",
                "Ki·ªÉm tra t√≠nh ch√≠nh x√°c c·ªßa d·ªØ li·ªáu chu·∫©n h√≥a",
                "Tri·ªÉn khai v√†o h·ªá th·ªëng production n·∫øu c·∫ßn",
                "Thi·∫øt l·∫≠p quy tr√¨nh chu·∫©n h√≥a t·ª± ƒë·ªông"
            ]
        }
        
        # L∆∞u b√°o c√°o t√≥m t·∫Øt
        summary_file = self.base_dir / f"BHXH_STANDARDIZED_ANALYSIS_SUMMARY_{self.timestamp}.json"
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(summary_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ B√°o c√°o t√≥m t·∫Øt: {summary_file}")
        
        # In t√≥m t·∫Øt ra console
        print("\n" + "=" * 70)
        print("üìä T√ìM T·∫ÆT K·∫æT QU·∫¢ PH√ÇN T√çCH")
        print("=" * 70)
        print(f"üéØ Lo·∫°i ph√¢n t√≠ch: {summary_data['analysis_info']['analysis_type']}")
        print(f"üìÖ Th·ªùi gian: {summary_data['analysis_info']['timestamp']}")
        print(f"üîß Ti√™u chu·∫©n: {summary_data['analysis_info']['compliance_standard']}")
        print(f"‚úÖ Tr·∫°ng th√°i: {summary_data['execution_summary']['status']}")
        
        print(f"\nüìã B√ÅO C√ÅO ƒê√É T·∫†O:")
        for report in self.reports_generated:
            if isinstance(report, dict):
                status_icon = "‚úÖ" if report.get("status") == "SUCCESS" else "‚ùå"
                print(f"   {status_icon} {report.get('type', 'Unknown')}: {report.get('file', 'N/A')}")
            else:
                print(f"   ‚úÖ Report: {report}")
        
        print(f"\nüîç KI·∫æN NGH·ªä:")
        for rec in summary_data['recommendations']:
            print(f"   ‚Ä¢ {rec}")
            
        print(f"\nüöÄ B∆Ø·ªöC TI·∫æP THEO:")
        for step in summary_data['next_steps']:
            print(f"   ‚Ä¢ {step}")
        
        return summary_file

    def run_full_analysis(self):
        """Ch·∫°y to√†n b·ªô quy tr√¨nh ph√¢n t√≠ch chu·∫©n h√≥a"""
        print("üöÄ B·∫ÆT ƒê·∫¶U QUY TR√åNH PH√ÇN T√çCH CHU·∫®N H√ìA D·ªÆ LI·ªÜU BHXH")
        print("=" * 70)
        
        try:
            # B∆∞·ªõc 1: Validate data standardization
            self.validate_data_standardization()
            
            # B∆∞·ªõc 2: Run customer data extraction
            self.run_customer_data_extraction()
            
            # B∆∞·ªõc 3: Generate reports
            self.generate_comprehensive_reports()
            
            # B∆∞·ªõc 4: Create final summary
            summary_file = self.create_final_summary()
            
            print("\n" + "=" * 70)
            print("üéâ HO√ÄN TH√ÄNH QUY TR√åNH PH√ÇN T√çCH CHU·∫®N H√ìA D·ªÆ LI·ªÜU")
            print("=" * 70)
            print(f"üìÑ B√°o c√°o t√≥m t·∫Øt: {summary_file}")
            print("üîí T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a theo ti√™u chu·∫©n BHXH Vietnam 2025")
            print("‚úÖ H·ªá th·ªëng s·∫µn s√†ng cho vi·ªác tri·ªÉn khai production")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå L·ªñI TRONG QUY TR√åNH PH√ÇN T√çCH: {e}")
            print("üîß Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh v√† dependencies")
            return False

if __name__ == "__main__":
    print("BHXH Standardized Data Analysis System")
    print("H·ªá th·ªëng ph√¢n t√≠ch v√† chu·∫©n h√≥a d·ªØ li·ªáu BHXH")
    print("Version: 2025.06.06")
    print("Compliance: BHXH Vietnam Standards 2025")
    print("=" * 70)
    
    runner = StandardizedAnalysisRunner()
    success = runner.run_full_analysis()
    
    if success:
        print("\nüéØ QUY TR√åNH HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
        print("üìß S·∫µn s√†ng cho: Executive review, Compliance audit, Production deployment")
        sys.exit(0)
    else:
        print("\n‚ùå QUY TR√åNH TH·∫§T B·∫†I!")
        print("üîß C·∫ßn ki·ªÉm tra v√† s·ª≠a l·ªói tr∆∞·ªõc khi ti·∫øp t·ª•c")
        sys.exit(1)
